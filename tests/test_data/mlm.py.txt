class MLMAcceleratorEnum(str, Enum):
    """
    MLM Accelerator Enum
    """

    amd64 = "amd64"
    cuda = "cuda"
    xla = "xla"
    amd_rocm = "amd-rocm"
    intel_ipex_cpu = "intel-ipex-cpu"
    intel_ipex_gpu = "intel-ipex-gpu"
    macos_arm = "macos-arm"


class _MLMAcceleratorEnumQuery(_EnumQuery):
    """
    MLM Accelerator Enum Query Interface
    """

    @classmethod
    def init_enums(cls, field_name, parent_obj: QueryBuilder, enum_fields: list[str]):
        o = _MLMAcceleratorEnumQuery(field_name, parent_obj)
        o._enum_values = set(enum_fields)
        return o

    def equals(self, value: MLMAcceleratorEnum) -> QueryBuilder:
        self._check([value.value])
        self._eq_value = value.value
        return self._parent_obj

    def not_equals(self, value: MLMAcceleratorEnum) -> QueryBuilder:
        self._check([value.value])
        self._ne_value = value.value
        return self._parent_obj

    def in_set(self, values: list[MLMAcceleratorEnum]) -> QueryBuilder:
        extracted = [x.value for x in values]
        self._check(extracted)
        self._in_values = extracted
        return self._parent_obj

    def not_in_set(self, values: list[MLMAcceleratorEnum]) -> QueryBuilder:
        extracted = [x.value for x in values]
        self._check(extracted)
        self._not_in_values = extracted
        return self._parent_obj


class MLMFrameworkEnum(str, Enum):
    """
    MLM Framework Enum
    """

    PyTorch = "PyTorch"
    TensorFlow = "TensorFlow"
    scikit_learn = "scikit-learn"
    Hugging_Face = "Hugging Face"
    Keras = "Keras"
    ONNX = "ONNX"
    rgee = "rgee"
    spatialRF = "spatialRF"
    JAX = "JAX"
    MXNet = "MXNet"
    Caffe = "Caffe"
    PyMC = "PyMC"
    Weka = "Weka"


class _MLMFrameworkEnumQuery(_EnumQuery):
    """
    MLM Framework Enum Query Interface
    Any other framework name to allow extension. Enum names should be preferred when possible to allow better portability.
    """

    @classmethod
    def init_enums(cls, field_name, parent_obj: QueryBuilder, enum_fields: list[str]):
        o = _MLMFrameworkEnumQuery(field_name, parent_obj)
        o._enum_values = set(enum_fields)
        return o

    def equals(self, value: MLMFrameworkEnum) -> QueryBuilder:
        self._check([value.value])
        self._eq_value = value.value
        return self._parent_obj

    def not_equals(self, value: MLMFrameworkEnum) -> QueryBuilder:
        self._check([value.value])
        self._ne_value = value.value
        return self._parent_obj

    def in_set(self, values: list[MLMFrameworkEnum]) -> QueryBuilder:
        extracted = [x.value for x in values]
        self._check(extracted)
        self._in_values = extracted
        return self._parent_obj

    def not_in_set(self, values: list[MLMFrameworkEnum]) -> QueryBuilder:
        extracted = [x.value for x in values]
        self._check(extracted)
        self._not_in_values = extracted
        return self._parent_obj


class _MLMExtension(_Extension):
    """
    This object represents the metadata for a Machine Learning Model (MLM) used in STAC documents.

    ...

    Attributes
    ----------
    accelerator : _MLMAcceleratorEnumQuery
        enum query interface for searching items by the mlm:accelerator field
    accelerator_constrained : _BooleanQuery
        enum query interface for searching items by the mlm:accelerator_constrained field
    accelerator_count: _NumberQuery
        number query interface for searching items by the mlm:accelerator_count field where the minimum value is 1. Float input.. Integer input.
    accelerator_summary : _StringQuery
        string query interface for searching items by the mlm:accelerator_summary field
    architecture : _StringQuery
        string query interface for searching items by the mlm:architecture field
    batch_size_suggestion: _NumberQuery
        number query interface for searching items by the mlm:batch_size_suggestion field where the minimum value is 0. Float input.. Integer input.
    framework : _MLMFrameworkEnumQuery
        enum query interface for searching items by the mlm:framework field
    framework_version : _StringQuery
        string query interface for searching items by the mlm:framework_version field
    hyperparameters : _NullCheck
        field can be checked to see if mlm:hyperparameters is null
    input : _NullCheck
        field can be checked to see if mlm:input is null
    memory_size: _NumberQuery
        number query interface for searching items by the mlm:memory_size field where the minimum value is 0. Float input.. Integer input.
    name : _StringQuery
        string query interface for searching items by the mlm:name field
    output : _NullCheck
        field can be checked to see if mlm:output is null
    pretrained : _BooleanQuery
        enum query interface for searching items by the mlm:pretrained field
    pretrained_source : _StringQuery
        string query interface for searching items by the mlm:pretrained_source field
    tasks : _NullCheck
        field can be checked to see if mlm:tasks is null
    total_parameters: _NumberQuery
        number query interface for searching items by the mlm:total_parameters field where the minimum value is 0. Float input.. Integer input.
    """
    def __init__(self, query_block: QueryBuilder):
        super().__init__(query_block)
        self.accelerator = _MLMAcceleratorEnumQuery.init_enums("mlm:accelerator", query_block, [x.value for x in MLMAcceleratorEnum])
        self.accelerator_constrained = _BooleanQuery("mlm:accelerator_constrained", query_block)
        self.accelerator_count = _NumberQuery.init_with_limits("mlm:accelerator_count", query_block, min_value=1, max_value=None, is_int=True)
        self.accelerator_summary = _StringQuery("mlm:accelerator_summary", query_block)
        self.architecture = _StringQuery("mlm:architecture", query_block)
        self.batch_size_suggestion = _NumberQuery.init_with_limits("mlm:batch_size_suggestion", query_block, min_value=0, max_value=None, is_int=True)
        self.framework = _MLMFrameworkEnumQuery.init_enums("mlm:framework", query_block, [x.value for x in MLMFrameworkEnum])
        self.framework_version = _StringQuery("mlm:framework_version", query_block)
        self.hyperparameters = _NullCheck("mlm:hyperparameters", query_block)
        self.input = _NullCheck("mlm:input", query_block)
        self.memory_size = _NumberQuery.init_with_limits("mlm:memory_size", query_block, min_value=0, max_value=None, is_int=True)
        self.name = _StringQuery("mlm:name", query_block)
        self.output = _NullCheck("mlm:output", query_block)
        self.pretrained = _BooleanQuery("mlm:pretrained", query_block)
        self.pretrained_source = _StringQuery("mlm:pretrained_source", query_block)
        self.tasks = _NullCheck("mlm:tasks", query_block)
        self.total_parameters = _NumberQuery.init_with_limits("mlm:total_parameters", query_block, min_value=0, max_value=None, is_int=True)
