class LandsatCollectionCategoryEnum(str, Enum):
    """
    Landsat Collection Category Enum
    """

    A1 = "A1"
    A2 = "A2"
    T1 = "T1"
    T2 = "T2"
    RT = "RT"


class _LandsatCollectionCategoryEnumQuery(_EnumQuery):
    """
    Landsat Collection Category Enum Query Interface
    Collection Category
    """

    @classmethod
    def init_enums(cls, field_name, parent_obj: QueryBuilder, enum_fields: list[str]):
        o = _LandsatCollectionCategoryEnumQuery(field_name, parent_obj)
        o._enum_values = set(enum_fields)
        return o

    def equals(self, value: LandsatCollectionCategoryEnum) -> QueryBuilder:
        self._check([value.value])
        self._eq_value = value.value
        return self._parent_obj

    def not_equals(self, value: LandsatCollectionCategoryEnum) -> QueryBuilder:
        self._check([value.value])
        self._ne_value = value.value
        return self._parent_obj

    def in_set(self, values: list[LandsatCollectionCategoryEnum]) -> QueryBuilder:
        extracted = [x.value for x in values]
        self._check(extracted)
        self._in_values = extracted
        return self._parent_obj

    def not_in_set(self, values: list[LandsatCollectionCategoryEnum]) -> QueryBuilder:
        extracted = [x.value for x in values]
        self._check(extracted)
        self._not_in_values = extracted
        return self._parent_obj


class LandsatCorrectionEnum(str, Enum):
    """
    Landsat Correction Enum
    """

    L1TP = "L1TP"
    L1GT = "L1GT"
    L1GS = "L1GS"
    L2SR = "L2SR"
    L2SP = "L2SP"


class _LandsatCorrectionEnumQuery(_EnumQuery):
    """
    Landsat Correction Enum Query Interface
    Product Correction Level
    """

    @classmethod
    def init_enums(cls, field_name, parent_obj: QueryBuilder, enum_fields: list[str]):
        o = _LandsatCorrectionEnumQuery(field_name, parent_obj)
        o._enum_values = set(enum_fields)
        return o

    def equals(self, value: LandsatCorrectionEnum) -> QueryBuilder:
        self._check([value.value])
        self._eq_value = value.value
        return self._parent_obj

    def not_equals(self, value: LandsatCorrectionEnum) -> QueryBuilder:
        self._check([value.value])
        self._ne_value = value.value
        return self._parent_obj

    def in_set(self, values: list[LandsatCorrectionEnum]) -> QueryBuilder:
        extracted = [x.value for x in values]
        self._check(extracted)
        self._in_values = extracted
        return self._parent_obj

    def not_in_set(self, values: list[LandsatCorrectionEnum]) -> QueryBuilder:
        extracted = [x.value for x in values]
        self._check(extracted)
        self._not_in_values = extracted
        return self._parent_obj


class _LandsatExtension(_Extension):
    """
    Landsat Extension to STAC Items and STAC Collections.

    ...

    Attributes
    ----------
    cloud_cover_land: _NumberQuery
        number query interface for searching items by the landsat:cloud_cover_land field where the minimum value is -1 and the max value is 100. Float input.
    collection_category : _LandsatCollectionCategoryEnumQuery
        enum query interface for searching items by the landsat:collection_category field
    collection_number : _StringQuery
        string query interface for searching items by the landsat:collection_number field
    correction : _LandsatCorrectionEnumQuery
        enum query interface for searching items by the landsat:correction field
    product_generated : _DateQuery
        datetime query interface for searching items by the landsat:product_generated field
    scene_id : _StringQuery
        string query interface for searching items by the landsat:scene_id field
    wrs_path : _StringQuery
        string query interface for searching items by the landsat:wrs_path field
    wrs_row : _StringQuery
        string query interface for searching items by the landsat:wrs_row field
    wrs_type : _StringQuery
        string query interface for searching items by the landsat:wrs_type field
    """
    def __init__(self, query_block: QueryBuilder):
        super().__init__(query_block)
        self.cloud_cover_land = _NumberQuery.init_with_limits("landsat:cloud_cover_land", query_block, min_value=-1, max_value=100, is_int=False)
        self.collection_category = _LandsatCollectionCategoryEnumQuery.init_enums("landsat:collection_category", query_block, [x.value for x in LandsatCollectionCategoryEnum])
        self.collection_number = _StringQuery("landsat:collection_number", query_block)
        self.correction = _LandsatCorrectionEnumQuery.init_enums("landsat:correction", query_block, [x.value for x in LandsatCorrectionEnum])
        self.product_generated = _DateQuery("landsat:product_generated", query_block)
        self.scene_id = _StringQuery("landsat:scene_id", query_block)
        self.wrs_path = _StringQuery("landsat:wrs_path", query_block)
        self.wrs_row = _StringQuery("landsat:wrs_row", query_block)
        self.wrs_type = _StringQuery("landsat:wrs_type", query_block)
